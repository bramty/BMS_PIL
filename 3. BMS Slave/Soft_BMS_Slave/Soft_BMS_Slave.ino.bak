//****************************************************
// BMS Master-Slave PIL
// Slave Module
//
// v3, 05.02.2024
// + Arduino Nano 
// + CAN Shield
// + Simulink Model via Serial
//
//**************************************************** 

#include <mcp_can.h>

/* Original BMS */
// #include <OneWire.h>
// #include <DallasTemperature.h>

/*  Arduino pins    CAN Shield pins
         2          INT
        13          SCK
        12          S0
        11          SI
        10          CS
        Vcc         Vcc
        GND         GND
*/
 
#define CAN_Int_Pin 2   // pins for the CAN module
#define CAN_CS_Pin 10

/* Original BMS */
// #define Temp_Pin 8      // pin for Temp Sensor
// #define Volt_Pin A2     // input pin for voltage
// #define Bal_Pin 9       // output pin for balancing resistor

MCP_CAN CAN(CAN_CS_Pin); 

#define MasterID 0x100      // ID Master

#define SlaveID  0x101      // ID Slave -> IT MUST BE MODIFIED FOR EACH SLAVE MODULE!!!

uint8_t ID = (uint8_t)(SlaveID - 0x100);

// Transmitted CAN Frame, from Slave to Master
// {Balancing State, Voltage High Byte, Voltage Low Byte, Temperature, 0x00, 0x00, 0x00, 0x00}
byte TxBuf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Received CAN Frame, from Master to Slave
byte RxBuf[8];
long unsigned int RxID;

static uint32_t Current_Time;
static uint32_t CAN_LastTime;

/* Original BMS */
// static int Temp_Timeout = 100;      // timeout for reading temperature
// static uint32_t Temp_LastTime; 
// static int Volt_Timeout = 100;      // timeout for reading voltage
// static uint32_t Volt_LastTime; 
// int Temp_NoSamples = CAN_Timeout / Temp_Timeout;
// int Volt_NoSamples = CAN_Timeout / Volt_Timeout;

static int CAN_Timeout = 1000;      // timeout for transmiting CAN frame

int Cell_Bal = 0x00;   // Balancing State
int Cell_Volt;      // Cell Voltage
int Cell_Temp;      // Cell Temperature

/* Original BMS */
// OneWire oneWire(Temp_Pin);                  // Temp Sensor initialization
// DallasTemperature Temp_Sensor(&oneWire);

/* PIL - ON */
#define BUFFER_SIZE 9
#define FLOAT_SIZE 4
uint8_t buff[BUFFER_SIZE];

typedef union {
  float fval;
  uint8_t bytes[FLOAT_SIZE];
} FLOATUNION_t;

FLOATUNION_t volt_k, temp_k, bal_k;
bool readStatus;

void setup () 
{
  // Initialize PINs
  pinMode(CAN_Int_Pin, INPUT);

  /* Original BMS */
  // pinMode(Volt_Pin, INPUT);
  // pinMode(Bal_Pin, OUTPUT); digitalWrite(Bal_Pin, LOW);

  /* PIL - ON */ 
  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  // Initialize CAN bus at 500 kbps, 8 MHz
  while (CAN_OK != CAN.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ))
  {
    delay(100);
  }
  CAN.setMode(MCP_NORMAL);

  Current_Time = millis();
  CAN_LastTime = Current_Time;
  
  /* Original BMS */
  // Temp_LastTime = Current_Time; 
  // Volt_LastTime = Current_Time;

  /* PIL - ON */  
  // Initialize serial communication buffer
  for(int i=0; i<FLOAT_SIZE; i++){
    volt_k.bytes[i] = 0x00;
    temp_k.bytes[i] = 0x00;
    bal_k.bytes[i] = 0x00;
  }
}

void loop () 
{
  // Received CAN frame from the Master
  // Verify Balancing Status from Master
  if (digitalRead(CAN_Int_Pin) == LOW) {
    CAN.readMsgBuf(&RxID, 8, RxBuf);
    if ( ( RxID == MasterID ) && ( RxBuf[0] == ID ) ) {
      Cell_Bal = RxBuf[1];
    } 
  }

  /* PIL - ON */
  // Reading voltage and temperature from model
  if (Serial.available() > 0){
    readStatus = readFromMatlab(&volt_k, &temp_k);
  }

  /* Original BMS */
  // // Reading voltage
  // if (Current_Time - Volt_LastTime > Temp_Timeout) { 
  //   Cell_Volt = (int)(analogRead(Volt_Pin) * 5.0 * 1000.0 / 1023.0);
  //   TxBuf[1] = (Cell_Volt >> 8 ) & 0xFF;
  //   TxBuf[2] = Cell_Volt & 0xFF;
  //   Volt_LastTime = Current_Time;
  // }

  // // Reading temperature
  // if (Current_Time - Temp_LastTime > Temp_Timeout) { 
  //   Temp_Sensor.requestTemperatures();
  //   TxBuf[3] = Temp_Sensor.getTempCByIndex(0);
  //   Temp_LastTime = Current_Time;
  // }  

  // Recording current time
  Current_Time = millis();

  // Transmission of data
  if (Current_Time - CAN_LastTime > CAN_Timeout) { 
    // Putting balancing state to Tx buffer
    TxBuf[0] = Cell_Bal;

    // Putting voltage reading to Tx buffer
    Cell_Volt = (int)(volt_k.fval * 5.0 * 1000.0 / 1023.0);
    TxBuf[1] = (Cell_Volt >> 8 ) & 0xFF;
    TxBuf[2] = Cell_Volt & 0xFF;

    // Putting temperature reading to Tx buffer
    Cell_Temp = (int) temp_k.fval;
    TxBuf[3] = Cell_Temp;

    // Sending Tx buffer
    CAN.sendMsgBuf(SlaveID, 0, 8, TxBuf);
    CAN_LastTime = Current_Time;
  }

  /* Original BMS */
  // // Activate/Deactivate balancing based on the state from the master
  // if ( Cell_Bal == 0x01 ) {
  //   digitalWrite(Bal_Pin, HIGH);
  // } else if ( Cell_Bal == 0x00 ) {
  //   digitalWrite(Bal_Pin, LOW);
  // }

  /* PIL - ON */
  // Sending battery balance command to model
  if(readStatus){
    bal_k.bytes[0] = Cell_Bal;
    writeToMatlab(bal_k);
    readStatus = false;
  }
  
}

/* PIL - ON */
bool readFromMatlab( FLOATUNION_t* f1, FLOATUNION_t* f2 ){
  bool state = false;
  FLOATUNION_t f;
  
  // read the incoming bytes:
  int rlen = Serial.readBytesUntil('\n', buff, BUFFER_SIZE);
  for( int i=0;i<4;i++){
    f1->bytes[i]=buff[i];
  }
  for( int i=4;i<8;i++){
    f2->bytes[i-4]=buff[i];
  }
  state = true;

  return state;
}

/* PIL - ON */
void writeToMatlab( FLOATUNION_t fnumber) {
  // Print header: Important to avoid sync errors!
  Serial.write('A');

  for (int i=0; i<4; i++){
	  Serial.write(fnumber.bytes[i]); 
  }

  Serial.print('\n');
}